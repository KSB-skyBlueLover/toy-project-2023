/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc 									//일반 function을 handler 객체로 받기 위한 handlerfunc
}																	//이제 handlerfunc는 handler 객체의 한 종류

type Routes []Route

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/v3",
		Index,
	},
	Route{
		"AddPet",
		strings.ToUpper("get"),
		"/api/v3/pet",
		AddPet,
	},
	Route{
		"DeletePet",
		strings.ToUpper("Delete"),
		"/api/v3/pet/{petId}",
		DeletePet,
	},

	Route{
		"FindPetsByStatus",
		strings.ToUpper("Get"),
		"/api/v3/pet/findByStatus",
		FindPetsByStatus,
	},

	Route{
		"FindPetsByTags",
		strings.ToUpper("Get"),
		"/api/v3/pet/findByTags",
		FindPetsByTags,
	},

	Route{
		"GetPetById",
		strings.ToUpper("Get"),
		"/api/v3/pet/{petId}",
		GetPetById,
	},

	Route{
		"UpdatePet",
		strings.ToUpper("Put"),
		"/api/v3/pet",
		UpdatePet,
	},

	Route{
		"UpdatePetWithForm",
		strings.ToUpper("Post"),
		"/api/v3/pet/{petId}",
		UpdatePetWithForm,
	},

	Route{
		"UploadFile",
		strings.ToUpper("Post"),
		"/api/v3/pet/{petId}/uploadImage",
		UploadFile,
	},

	Route{
		"DeleteOrder",
		strings.ToUpper("Delete"),
		"/api/v3/store/order/{orderId}",
		DeleteOrder,
	},

	Route{
		"GetInventory",
		strings.ToUpper("Get"),
		"/api/v3/store/inventory",
		GetInventory,
	},

	Route{
		"GetOrderById",
		strings.ToUpper("Get"),
		"/api/v3/store/order/{orderId}",
		GetOrderById,
	},

	Route{
		"PlaceOrder",
		strings.ToUpper("Post"),
		"/api/v3/store/order",
		PlaceOrder,
	},

	Route{
		"CreateUser",
		strings.ToUpper("Post"),
		"/api/v3/user",
		CreateUser,
	},

	Route{
		"CreateUsersWithListInput",
		strings.ToUpper("Post"),
		"/api/v3/user/createWithList",
		CreateUsersWithListInput,
	},

	Route{
		"DeleteUser",
		strings.ToUpper("Delete"),
		"/api/v3/user/{username}",
		DeleteUser,
	},

	Route{
		"GetUserByName",
		strings.ToUpper("Get"),
		"/api/v3/user/{username}",
		GetUserByName,
	},

	Route{
		"LoginUser",
		strings.ToUpper("Get"),
		"/api/v3/user/login",
		LoginUser,
	},

	Route{
		"LogoutUser",
		strings.ToUpper("Get"),
		"/api/v3/user/logout",
		LogoutUser,
	},

	Route{
		"UpdateUser",
		strings.ToUpper("Put"),
		"/api/v3/user/{username}",
		UpdateUser,
	},
}

func NewRouter() *mux.Router {
	
	router := mux.NewRouter().StrictSlash(true) 
	for _, route := range routes {				
		handler := Logger(route.HandlerFunc, route.Name)
		
		


		
		//strict slash는 뒤의 / 를 떼어낸 형태로 redirect 해주는 역할 - 브라우저에서는 이게 잘 안보이니 썬더클라이언트로 해보자
		//handler = route.HandlerFunc 이거 없애고 밑에서 축약해서 써도 상관 없지
		// logger에 handler 객체와 router name 넘겨주기



		//Logger는 handler 객체와 router name을 받는 녀석이지
					//handlerfunc는 일반func를 handler 객체로 변환해주는 고마운.. 녀석
					//Logger의 역할은 쉽게 말해 기존의 핸들러 (여기서는 route.HandlerFunc) 에 로그 찍는 기능을 추가해서 넘기는 역할
					//그럼 로그 빼고 테스트를 한번 해볼까 - 된다. Handler 안에 route.HandlerFunc 그대로 넘기면 로그 없이 비지니스 로직 수행함
					
		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

