/*
* Swagger Petstore - OpenAPI 3.0
*
* This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
*
* API version: 1.0.17
* Contact: apiteam@swagger.io
* Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	sw "example.com/m/go"
	"log"
	"net/http"
	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//
)

func main() {
	log.Printf("Server started")

	router := sw.NewRouter()

	log.Fatal(http.ListenAndServe(":8080", router))
}

//You can edit this code!
//Click here and start typing.
//You can edit this code!
//Click here and start typing.
//package main
//

//import (
//	"fmt"
//	"math"
//)
//
//func distance(x1, y1, x2, y2 float64) float64 {
//	a := x2 - x1
//	b := y2 - y1
//	return math.Sqrt(a*a + b*b)
//}
//
//type Rectangle struct {
//	x1, y1, x2, y2 float64
//}
//
//func (r *Rectangle) area() float64 {
//	l := distance(r.x1, r.y1, r.x1, r.y2)
//	w := distance(r.x1, r.y1, r.x2, r.y1)
//	return l * w
//}
//
//type Circle struct {
//	x, y, r float64
//}
//
//func (c *Circle) area() float64 {
//	return math.Pi * c.r * c.r
//}
//
//type Shape interface {
//	area() float64
//}
//
//type MultiShape struct {
//	shapes []Shape
//}
//
//func (m *MultiShape) area() float64 {
//	var area float64
//	for _, s := range m.shapes {
//		area += s.area()
//	}
//	return area
//}
//
//func main() {
//
//	c := Circle{0, 0, 5}
//	r := &Rectangle{0, 0, 1, 1}
//	fmt.Println(c.area())
//	fmt.Println(r.area())
//
//	ms := MultiShape{[]Shape{c, r}}
//	ms2 := MultiShape{shapes: []Shape{c, r}}
//	fmt.Println(ms.area())
//	fmt.Println(ms2.area())
//
//}
